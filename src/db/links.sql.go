// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: links.sql

package db

import (
	"context"
	"database/sql"
)

const checkShortUrlKeyExists = `-- name: CheckShortUrlKeyExists :one
SELECT EXISTS(SELECT 1 FROM link WHERE short_url_key = $1 AND account_id = $2)
`

type CheckShortUrlKeyExistsParams struct {
	ShortUrlKey sql.NullString
	AccountID   int32
}

func (q *Queries) CheckShortUrlKeyExists(ctx context.Context, arg CheckShortUrlKeyExistsParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkShortUrlKeyExists, arg.ShortUrlKey, arg.AccountID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const getLinkByAccountIDAndShortURLKey = `-- name: GetLinkByAccountIDAndShortURLKey :one
SELECT id, short_url_key, account_id, long_url, enabled, tracking_enabled,created_at, updated_at
FROM link WHERE account_id = $1 AND short_url_key = $2
`

type GetLinkByAccountIDAndShortURLKeyParams struct {
	AccountID   int32
	ShortUrlKey sql.NullString
}

func (q *Queries) GetLinkByAccountIDAndShortURLKey(ctx context.Context, arg GetLinkByAccountIDAndShortURLKeyParams) (Link, error) {
	row := q.db.QueryRowContext(ctx, getLinkByAccountIDAndShortURLKey, arg.AccountID, arg.ShortUrlKey)
	var i Link
	err := row.Scan(
		&i.ID,
		&i.ShortUrlKey,
		&i.AccountID,
		&i.LongUrl,
		&i.Enabled,
		&i.TrackingEnabled,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const insertNewLink = `-- name: InsertNewLink :exec
INSERT INTO link (short_url_key, account_id, long_url)
VALUES ($1, $2, $3)
RETURNING id, short_url_key, account_id, long_url, enabled, tracking_enabled, created_at, updated_at
`

type InsertNewLinkParams struct {
	ShortUrlKey sql.NullString
	AccountID   int32
	LongUrl     string
}

func (q *Queries) InsertNewLink(ctx context.Context, arg InsertNewLinkParams) error {
	_, err := q.db.ExecContext(ctx, insertNewLink, arg.ShortUrlKey, arg.AccountID, arg.LongUrl)
	return err
}

const updateLinkLongURL = `-- name: UpdateLinkLongURL :exec
UPDATE link SET long_url = $1, updated_at=now() WHERE id = $2
RETURNING id, short_url_key, account_id, long_url, enabled, tracking_enabled, created_at, updated_at
`

type UpdateLinkLongURLParams struct {
	LongUrl string
	ID      int32
}

func (q *Queries) UpdateLinkLongURL(ctx context.Context, arg UpdateLinkLongURLParams) error {
	_, err := q.db.ExecContext(ctx, updateLinkLongURL, arg.LongUrl, arg.ID)
	return err
}

const updateLinkStatus = `-- name: UpdateLinkStatus :exec
UPDATE link SET enabled = $1, updated_at=now() WHERE id = $2 
RETURNING id, short_url_key, account_id, long_url, enabled, tracking_enabled, created_at, updated_at
`

type UpdateLinkStatusParams struct {
	Enabled bool
	ID      int32
}

func (q *Queries) UpdateLinkStatus(ctx context.Context, arg UpdateLinkStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateLinkStatus, arg.Enabled, arg.ID)
	return err
}

const updateLinkTrackingStatus = `-- name: UpdateLinkTrackingStatus :exec
UPDATE link SET tracking_enabled = $1, updated_at=now() WHERE id = $2 
RETURNING id, short_url_key, account_id, long_url, enabled, tracking_enabled, created_at, updated_at
`

type UpdateLinkTrackingStatusParams struct {
	TrackingEnabled bool
	ID              int32
}

func (q *Queries) UpdateLinkTrackingStatus(ctx context.Context, arg UpdateLinkTrackingStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateLinkTrackingStatus, arg.TrackingEnabled, arg.ID)
	return err
}
