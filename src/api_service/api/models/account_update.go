// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AccountUpdate account update
//
// swagger:model AccountUpdate
type AccountUpdate struct {

	// status
	// Required: true
	// Enum: [active inactive]
	Status *string `json:"status"`

	// username
	// Required: true
	Username *string `json:"username"`
}

// Validate validates this account update
func (m *AccountUpdate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsername(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var accountUpdateTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["active","inactive"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		accountUpdateTypeStatusPropEnum = append(accountUpdateTypeStatusPropEnum, v)
	}
}

const (

	// AccountUpdateStatusActive captures enum value "active"
	AccountUpdateStatusActive string = "active"

	// AccountUpdateStatusInactive captures enum value "inactive"
	AccountUpdateStatusInactive string = "inactive"
)

// prop value enum
func (m *AccountUpdate) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, accountUpdateTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AccountUpdate) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

func (m *AccountUpdate) validateUsername(formats strfmt.Registry) error {

	if err := validate.Required("username", "body", m.Username); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this account update based on context it is used
func (m *AccountUpdate) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AccountUpdate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AccountUpdate) UnmarshalBinary(b []byte) error {
	var res AccountUpdate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
