// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// PutShortURLOKCode is the HTTP code returned for type PutShortURLOK
const PutShortURLOKCode int = 200

/*
PutShortURLOK Success

swagger:response putShortUrlOK
*/
type PutShortURLOK struct {

	/*
	  In: Body
	*/
	Payload *PutShortURLOKBody `json:"body,omitempty"`
}

// NewPutShortURLOK creates PutShortURLOK with default headers values
func NewPutShortURLOK() *PutShortURLOK {

	return &PutShortURLOK{}
}

// WithPayload adds the payload to the put short Url o k response
func (o *PutShortURLOK) WithPayload(payload *PutShortURLOKBody) *PutShortURLOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put short Url o k response
func (o *PutShortURLOK) SetPayload(payload *PutShortURLOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutShortURLOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PutShortURLBadRequestCode is the HTTP code returned for type PutShortURLBadRequest
const PutShortURLBadRequestCode int = 400

/*
PutShortURLBadRequest Bad Request

swagger:response putShortUrlBadRequest
*/
type PutShortURLBadRequest struct {

	/*
	  In: Body
	*/
	Payload *PutShortURLBadRequestBody `json:"body,omitempty"`
}

// NewPutShortURLBadRequest creates PutShortURLBadRequest with default headers values
func NewPutShortURLBadRequest() *PutShortURLBadRequest {

	return &PutShortURLBadRequest{}
}

// WithPayload adds the payload to the put short Url bad request response
func (o *PutShortURLBadRequest) WithPayload(payload *PutShortURLBadRequestBody) *PutShortURLBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put short Url bad request response
func (o *PutShortURLBadRequest) SetPayload(payload *PutShortURLBadRequestBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutShortURLBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PutShortURLUnauthorizedCode is the HTTP code returned for type PutShortURLUnauthorized
const PutShortURLUnauthorizedCode int = 401

/*
PutShortURLUnauthorized Unauthorized

swagger:response putShortUrlUnauthorized
*/
type PutShortURLUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *PutShortURLUnauthorizedBody `json:"body,omitempty"`
}

// NewPutShortURLUnauthorized creates PutShortURLUnauthorized with default headers values
func NewPutShortURLUnauthorized() *PutShortURLUnauthorized {

	return &PutShortURLUnauthorized{}
}

// WithPayload adds the payload to the put short Url unauthorized response
func (o *PutShortURLUnauthorized) WithPayload(payload *PutShortURLUnauthorizedBody) *PutShortURLUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put short Url unauthorized response
func (o *PutShortURLUnauthorized) SetPayload(payload *PutShortURLUnauthorizedBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutShortURLUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PutShortURLNotFoundCode is the HTTP code returned for type PutShortURLNotFound
const PutShortURLNotFoundCode int = 404

/*
PutShortURLNotFound Not Found

swagger:response putShortUrlNotFound
*/
type PutShortURLNotFound struct {

	/*
	  In: Body
	*/
	Payload *PutShortURLNotFoundBody `json:"body,omitempty"`
}

// NewPutShortURLNotFound creates PutShortURLNotFound with default headers values
func NewPutShortURLNotFound() *PutShortURLNotFound {

	return &PutShortURLNotFound{}
}

// WithPayload adds the payload to the put short Url not found response
func (o *PutShortURLNotFound) WithPayload(payload *PutShortURLNotFoundBody) *PutShortURLNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put short Url not found response
func (o *PutShortURLNotFound) SetPayload(payload *PutShortURLNotFoundBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutShortURLNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PutShortURLInternalServerErrorCode is the HTTP code returned for type PutShortURLInternalServerError
const PutShortURLInternalServerErrorCode int = 500

/*
PutShortURLInternalServerError Internal Server Error

swagger:response putShortUrlInternalServerError
*/
type PutShortURLInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *PutShortURLInternalServerErrorBody `json:"body,omitempty"`
}

// NewPutShortURLInternalServerError creates PutShortURLInternalServerError with default headers values
func NewPutShortURLInternalServerError() *PutShortURLInternalServerError {

	return &PutShortURLInternalServerError{}
}

// WithPayload adds the payload to the put short Url internal server error response
func (o *PutShortURLInternalServerError) WithPayload(payload *PutShortURLInternalServerErrorBody) *PutShortURLInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put short Url internal server error response
func (o *PutShortURLInternalServerError) SetPayload(payload *PutShortURLInternalServerErrorBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutShortURLInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
