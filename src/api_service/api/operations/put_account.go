// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"encoding/json"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PutAccountHandlerFunc turns a function with the right signature into a put account handler
type PutAccountHandlerFunc func(PutAccountParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PutAccountHandlerFunc) Handle(params PutAccountParams) middleware.Responder {
	return fn(params)
}

// PutAccountHandler interface for that can handle valid put account params
type PutAccountHandler interface {
	Handle(PutAccountParams) middleware.Responder
}

// NewPutAccount creates a new http.Handler for the put account operation
func NewPutAccount(ctx *middleware.Context, handler PutAccountHandler) *PutAccount {
	return &PutAccount{Context: ctx, Handler: handler}
}

/*
	PutAccount swagger:route PUT /account putAccount

Update Account
*/
type PutAccount struct {
	Context *middleware.Context
	Handler PutAccountHandler
}

func (o *PutAccount) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPutAccountParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PutAccountBadRequestBody put account bad request body
//
// swagger:model PutAccountBadRequestBody
type PutAccountBadRequestBody struct {

	// error
	Error string `json:"error,omitempty"`
}

// Validate validates this put account bad request body
func (o *PutAccountBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this put account bad request body based on context it is used
func (o *PutAccountBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PutAccountBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutAccountBadRequestBody) UnmarshalBinary(b []byte) error {
	var res PutAccountBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PutAccountBody put account body
//
// swagger:model PutAccountBody
type PutAccountBody struct {

	// status
	// Required: true
	// Enum: [active inactive]
	Status *string `json:"status"`

	// username
	// Required: true
	Username *string `json:"username"`
}

// Validate validates this put account body
func (o *PutAccountBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUsername(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var putAccountBodyTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["active","inactive"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		putAccountBodyTypeStatusPropEnum = append(putAccountBodyTypeStatusPropEnum, v)
	}
}

const (

	// PutAccountBodyStatusActive captures enum value "active"
	PutAccountBodyStatusActive string = "active"

	// PutAccountBodyStatusInactive captures enum value "inactive"
	PutAccountBodyStatusInactive string = "inactive"
)

// prop value enum
func (o *PutAccountBody) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, putAccountBodyTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *PutAccountBody) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"status", "body", o.Status); err != nil {
		return err
	}

	// value enum
	if err := o.validateStatusEnum("body"+"."+"status", "body", *o.Status); err != nil {
		return err
	}

	return nil
}

func (o *PutAccountBody) validateUsername(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"username", "body", o.Username); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this put account body based on context it is used
func (o *PutAccountBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PutAccountBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutAccountBody) UnmarshalBinary(b []byte) error {
	var res PutAccountBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PutAccountInternalServerErrorBody put account internal server error body
//
// swagger:model PutAccountInternalServerErrorBody
type PutAccountInternalServerErrorBody struct {

	// error
	Error string `json:"error,omitempty"`
}

// Validate validates this put account internal server error body
func (o *PutAccountInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this put account internal server error body based on context it is used
func (o *PutAccountInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PutAccountInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutAccountInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res PutAccountInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PutAccountNotFoundBody put account not found body
//
// swagger:model PutAccountNotFoundBody
type PutAccountNotFoundBody struct {

	// error
	Error string `json:"error,omitempty"`
}

// Validate validates this put account not found body
func (o *PutAccountNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this put account not found body based on context it is used
func (o *PutAccountNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PutAccountNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutAccountNotFoundBody) UnmarshalBinary(b []byte) error {
	var res PutAccountNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PutAccountOKBody put account o k body
//
// swagger:model PutAccountOKBody
type PutAccountOKBody struct {

	// status
	Status string `json:"status,omitempty"`
}

// Validate validates this put account o k body
func (o *PutAccountOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this put account o k body based on context it is used
func (o *PutAccountOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PutAccountOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutAccountOKBody) UnmarshalBinary(b []byte) error {
	var res PutAccountOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PutAccountUnauthorizedBody put account unauthorized body
//
// swagger:model PutAccountUnauthorizedBody
type PutAccountUnauthorizedBody struct {

	// error
	Error string `json:"error,omitempty"`
}

// Validate validates this put account unauthorized body
func (o *PutAccountUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this put account unauthorized body based on context it is used
func (o *PutAccountUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PutAccountUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutAccountUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res PutAccountUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
