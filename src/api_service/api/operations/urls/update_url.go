// Code generated by go-swagger; DO NOT EDIT.

package urls

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// UpdateURLHandlerFunc turns a function with the right signature into a update URL handler
type UpdateURLHandlerFunc func(UpdateURLParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateURLHandlerFunc) Handle(params UpdateURLParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// UpdateURLHandler interface for that can handle valid update URL params
type UpdateURLHandler interface {
	Handle(UpdateURLParams, interface{}) middleware.Responder
}

// NewUpdateURL creates a new http.Handler for the update URL operation
func NewUpdateURL(ctx *middleware.Context, handler UpdateURLHandler) *UpdateURL {
	return &UpdateURL{Context: ctx, Handler: handler}
}

/*
	UpdateURL swagger:route PUT /urls urls updateUrl

# Update a URL

Update URL
*/
type UpdateURL struct {
	Context *middleware.Context
	Handler UpdateURLHandler
}

func (o *UpdateURL) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewUpdateURLParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc.(interface{}) // this is really a interface{}, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// UpdateURLOKBody update URL o k body
//
// swagger:model UpdateURLOKBody
type UpdateURLOKBody struct {

	// long url
	LongURL string `json:"long_url,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// tracking status
	TrackingStatus string `json:"tracking_status,omitempty"`
}

// Validate validates this update URL o k body
func (o *UpdateURLOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update URL o k body based on context it is used
func (o *UpdateURLOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateURLOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateURLOKBody) UnmarshalBinary(b []byte) error {
	var res UpdateURLOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
