// Code generated by go-swagger; DO NOT EDIT.

package links

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// UpdateLinkHandlerFunc turns a function with the right signature into a update link handler
type UpdateLinkHandlerFunc func(UpdateLinkParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateLinkHandlerFunc) Handle(params UpdateLinkParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// UpdateLinkHandler interface for that can handle valid update link params
type UpdateLinkHandler interface {
	Handle(UpdateLinkParams, interface{}) middleware.Responder
}

// NewUpdateLink creates a new http.Handler for the update link operation
func NewUpdateLink(ctx *middleware.Context, handler UpdateLinkHandler) *UpdateLink {
	return &UpdateLink{Context: ctx, Handler: handler}
}

/*
	UpdateLink swagger:route PUT /links links updateLink

# Update a link

Update Link
*/
type UpdateLink struct {
	Context *middleware.Context
	Handler UpdateLinkHandler
}

func (o *UpdateLink) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewUpdateLinkParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc.(interface{}) // this is really a interface{}, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// UpdateLinkOKBody update link o k body
//
// swagger:model UpdateLinkOKBody
type UpdateLinkOKBody struct {

	// long url
	LongURL string `json:"long_url,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// tracking status
	TrackingStatus string `json:"tracking_status,omitempty"`
}

// Validate validates this update link o k body
func (o *UpdateLinkOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update link o k body based on context it is used
func (o *UpdateLinkOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateLinkOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateLinkOKBody) UnmarshalBinary(b []byte) error {
	var res UpdateLinkOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
