// Code generated by go-swagger; DO NOT EDIT.

package links

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/elbombardi/squrl/src/api_service/api/models"
)

// UpdateLinkOKCode is the HTTP code returned for type UpdateLinkOK
const UpdateLinkOKCode int = 200

/*
UpdateLinkOK Success

swagger:response updateLinkOK
*/
type UpdateLinkOK struct {

	/*
	  In: Body
	*/
	Payload *UpdateLinkOKBody `json:"body,omitempty"`
}

// NewUpdateLinkOK creates UpdateLinkOK with default headers values
func NewUpdateLinkOK() *UpdateLinkOK {

	return &UpdateLinkOK{}
}

// WithPayload adds the payload to the update link o k response
func (o *UpdateLinkOK) WithPayload(payload *UpdateLinkOKBody) *UpdateLinkOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update link o k response
func (o *UpdateLinkOK) SetPayload(payload *UpdateLinkOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateLinkOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateLinkBadRequestCode is the HTTP code returned for type UpdateLinkBadRequest
const UpdateLinkBadRequestCode int = 400

/*
UpdateLinkBadRequest Bad Request

swagger:response updateLinkBadRequest
*/
type UpdateLinkBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewUpdateLinkBadRequest creates UpdateLinkBadRequest with default headers values
func NewUpdateLinkBadRequest() *UpdateLinkBadRequest {

	return &UpdateLinkBadRequest{}
}

// WithPayload adds the payload to the update link bad request response
func (o *UpdateLinkBadRequest) WithPayload(payload *models.Error) *UpdateLinkBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update link bad request response
func (o *UpdateLinkBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateLinkBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateLinkUnauthorizedCode is the HTTP code returned for type UpdateLinkUnauthorized
const UpdateLinkUnauthorizedCode int = 401

/*
UpdateLinkUnauthorized Unauthorized

swagger:response updateLinkUnauthorized
*/
type UpdateLinkUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewUpdateLinkUnauthorized creates UpdateLinkUnauthorized with default headers values
func NewUpdateLinkUnauthorized() *UpdateLinkUnauthorized {

	return &UpdateLinkUnauthorized{}
}

// WithPayload adds the payload to the update link unauthorized response
func (o *UpdateLinkUnauthorized) WithPayload(payload *models.Error) *UpdateLinkUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update link unauthorized response
func (o *UpdateLinkUnauthorized) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateLinkUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateLinkNotFoundCode is the HTTP code returned for type UpdateLinkNotFound
const UpdateLinkNotFoundCode int = 404

/*
UpdateLinkNotFound Not Found

swagger:response updateLinkNotFound
*/
type UpdateLinkNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewUpdateLinkNotFound creates UpdateLinkNotFound with default headers values
func NewUpdateLinkNotFound() *UpdateLinkNotFound {

	return &UpdateLinkNotFound{}
}

// WithPayload adds the payload to the update link not found response
func (o *UpdateLinkNotFound) WithPayload(payload *models.Error) *UpdateLinkNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update link not found response
func (o *UpdateLinkNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateLinkNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateLinkInternalServerErrorCode is the HTTP code returned for type UpdateLinkInternalServerError
const UpdateLinkInternalServerErrorCode int = 500

/*
UpdateLinkInternalServerError Internal Server Error

swagger:response updateLinkInternalServerError
*/
type UpdateLinkInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewUpdateLinkInternalServerError creates UpdateLinkInternalServerError with default headers values
func NewUpdateLinkInternalServerError() *UpdateLinkInternalServerError {

	return &UpdateLinkInternalServerError{}
}

// WithPayload adds the payload to the update link internal server error response
func (o *UpdateLinkInternalServerError) WithPayload(payload *models.Error) *UpdateLinkInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update link internal server error response
func (o *UpdateLinkInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateLinkInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
