// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// PutAccountOKCode is the HTTP code returned for type PutAccountOK
const PutAccountOKCode int = 200

/*
PutAccountOK Success

swagger:response putAccountOK
*/
type PutAccountOK struct {

	/*
	  In: Body
	*/
	Payload *PutAccountOKBody `json:"body,omitempty"`
}

// NewPutAccountOK creates PutAccountOK with default headers values
func NewPutAccountOK() *PutAccountOK {

	return &PutAccountOK{}
}

// WithPayload adds the payload to the put account o k response
func (o *PutAccountOK) WithPayload(payload *PutAccountOKBody) *PutAccountOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put account o k response
func (o *PutAccountOK) SetPayload(payload *PutAccountOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutAccountOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PutAccountBadRequestCode is the HTTP code returned for type PutAccountBadRequest
const PutAccountBadRequestCode int = 400

/*
PutAccountBadRequest Bad Request

swagger:response putAccountBadRequest
*/
type PutAccountBadRequest struct {

	/*
	  In: Body
	*/
	Payload *PutAccountBadRequestBody `json:"body,omitempty"`
}

// NewPutAccountBadRequest creates PutAccountBadRequest with default headers values
func NewPutAccountBadRequest() *PutAccountBadRequest {

	return &PutAccountBadRequest{}
}

// WithPayload adds the payload to the put account bad request response
func (o *PutAccountBadRequest) WithPayload(payload *PutAccountBadRequestBody) *PutAccountBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put account bad request response
func (o *PutAccountBadRequest) SetPayload(payload *PutAccountBadRequestBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutAccountBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PutAccountUnauthorizedCode is the HTTP code returned for type PutAccountUnauthorized
const PutAccountUnauthorizedCode int = 401

/*
PutAccountUnauthorized Unauthorized

swagger:response putAccountUnauthorized
*/
type PutAccountUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *PutAccountUnauthorizedBody `json:"body,omitempty"`
}

// NewPutAccountUnauthorized creates PutAccountUnauthorized with default headers values
func NewPutAccountUnauthorized() *PutAccountUnauthorized {

	return &PutAccountUnauthorized{}
}

// WithPayload adds the payload to the put account unauthorized response
func (o *PutAccountUnauthorized) WithPayload(payload *PutAccountUnauthorizedBody) *PutAccountUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put account unauthorized response
func (o *PutAccountUnauthorized) SetPayload(payload *PutAccountUnauthorizedBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutAccountUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PutAccountNotFoundCode is the HTTP code returned for type PutAccountNotFound
const PutAccountNotFoundCode int = 404

/*
PutAccountNotFound Not Found

swagger:response putAccountNotFound
*/
type PutAccountNotFound struct {

	/*
	  In: Body
	*/
	Payload *PutAccountNotFoundBody `json:"body,omitempty"`
}

// NewPutAccountNotFound creates PutAccountNotFound with default headers values
func NewPutAccountNotFound() *PutAccountNotFound {

	return &PutAccountNotFound{}
}

// WithPayload adds the payload to the put account not found response
func (o *PutAccountNotFound) WithPayload(payload *PutAccountNotFoundBody) *PutAccountNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put account not found response
func (o *PutAccountNotFound) SetPayload(payload *PutAccountNotFoundBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutAccountNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PutAccountInternalServerErrorCode is the HTTP code returned for type PutAccountInternalServerError
const PutAccountInternalServerErrorCode int = 500

/*
PutAccountInternalServerError Internal Server Error

swagger:response putAccountInternalServerError
*/
type PutAccountInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *PutAccountInternalServerErrorBody `json:"body,omitempty"`
}

// NewPutAccountInternalServerError creates PutAccountInternalServerError with default headers values
func NewPutAccountInternalServerError() *PutAccountInternalServerError {

	return &PutAccountInternalServerError{}
}

// WithPayload adds the payload to the put account internal server error response
func (o *PutAccountInternalServerError) WithPayload(payload *PutAccountInternalServerErrorBody) *PutAccountInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put account internal server error response
func (o *PutAccountInternalServerError) SetPayload(payload *PutAccountInternalServerErrorBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutAccountInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
