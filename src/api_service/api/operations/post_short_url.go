// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostShortURLHandlerFunc turns a function with the right signature into a post short URL handler
type PostShortURLHandlerFunc func(PostShortURLParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostShortURLHandlerFunc) Handle(params PostShortURLParams) middleware.Responder {
	return fn(params)
}

// PostShortURLHandler interface for that can handle valid post short URL params
type PostShortURLHandler interface {
	Handle(PostShortURLParams) middleware.Responder
}

// NewPostShortURL creates a new http.Handler for the post short URL operation
func NewPostShortURL(ctx *middleware.Context, handler PostShortURLHandler) *PostShortURL {
	return &PostShortURL{Context: ctx, Handler: handler}
}

/*
	PostShortURL swagger:route POST /short-url postShortUrl

Create ShortURL
*/
type PostShortURL struct {
	Context *middleware.Context
	Handler PostShortURLHandler
}

func (o *PostShortURL) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostShortURLParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PostShortURLBadRequestBody post short URL bad request body
//
// swagger:model PostShortURLBadRequestBody
type PostShortURLBadRequestBody struct {

	// error
	Error string `json:"error,omitempty"`
}

// Validate validates this post short URL bad request body
func (o *PostShortURLBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post short URL bad request body based on context it is used
func (o *PostShortURLBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostShortURLBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostShortURLBadRequestBody) UnmarshalBinary(b []byte) error {
	var res PostShortURLBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostShortURLBody post short URL body
//
// swagger:model PostShortURLBody
type PostShortURLBody struct {

	// long url
	// Required: true
	LongURL *string `json:"long_url"`
}

// Validate validates this post short URL body
func (o *PostShortURLBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateLongURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostShortURLBody) validateLongURL(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"long_url", "body", o.LongURL); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this post short URL body based on context it is used
func (o *PostShortURLBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostShortURLBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostShortURLBody) UnmarshalBinary(b []byte) error {
	var res PostShortURLBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostShortURLInternalServerErrorBody post short URL internal server error body
//
// swagger:model PostShortURLInternalServerErrorBody
type PostShortURLInternalServerErrorBody struct {

	// error
	Error string `json:"error,omitempty"`
}

// Validate validates this post short URL internal server error body
func (o *PostShortURLInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post short URL internal server error body based on context it is used
func (o *PostShortURLInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostShortURLInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostShortURLInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res PostShortURLInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostShortURLOKBody post short URL o k body
//
// swagger:model PostShortURLOKBody
type PostShortURLOKBody struct {

	// short url
	ShortURL string `json:"short_url,omitempty"`

	// short url key
	ShortURLKey string `json:"short_url_key,omitempty"`
}

// Validate validates this post short URL o k body
func (o *PostShortURLOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post short URL o k body based on context it is used
func (o *PostShortURLOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostShortURLOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostShortURLOKBody) UnmarshalBinary(b []byte) error {
	var res PostShortURLOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostShortURLUnauthorizedBody post short URL unauthorized body
//
// swagger:model PostShortURLUnauthorizedBody
type PostShortURLUnauthorizedBody struct {

	// error
	Error string `json:"error,omitempty"`
}

// Validate validates this post short URL unauthorized body
func (o *PostShortURLUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post short URL unauthorized body based on context it is used
func (o *PostShortURLUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostShortURLUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostShortURLUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res PostShortURLUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
