---
swagger: "2.0"
info:
  description: A service that creates, validates and submits an order to a marketplace
  title: Orders API
  version: 1.0.0
produces:
- application/json
schemes:
- http
paths:
  
  /order:  
    post:
      description: "Endpoint 1 : Submit a new order" 
      summary: "Endpoint 1 : Submit a new order" 
      produces:
        - application/json
      consumes:
        - application/json
      operationId: submitOrder
      parameters:
        - name: order
          in: body
          required: true
          description: Order's information
          schema:
            $ref: "#/definitions/Order"
      responses:
        200:
          description: Order has been validated and is being submitted to the marketplace.
          schema:
            $ref: "#/definitions/OrdersResponse"
        422:
          description: Validation Error
          schema:
            $ref: "#/definitions/OrdersResponse"
        default:
          description: generic error response
          schema:
            $ref: "#/definitions/OrdersResponse"
  
  /order/{id}:
    get:
      description: "Endpoint 2 :  Locates and Order by its ID and returns it"
      summary: "Endpoint 2 :  Locates and Order by its ID and returns it"
      produces:
        - application/json
      operationId: getOrder
      parameters:
        - name: id
          in: path
          description: Order UUID  
          required: true
          type: string
      responses:
        200:
          description: Returns the order information
          schema:
            $ref: "#/definitions/OrdersResponse"
        422:
          description: Bad request
          schema:
            $ref: "#/definitions/OrdersResponse"
        404:
          description: Order Not Found
          schema:
            $ref: "#/definitions/OrdersResponse"
        default:
          description: generic error response
          schema:
            $ref: "#/definitions/OrdersResponse"
    
    delete:
      description: "Endpoint 4 : Cancel an order identified by its UUID"
      summary: "Endpoint 4 : Cancel an order identified by its UUID"
      produces:
        - application/json
      consumes:
        - application/json
      operationId: cancelOrder
      parameters:
        - name: id
          in: path
          description: Order UUID  
          required: true
          type: string
        - name: cancelation
          in: body
          required: true
          description: Cancelation details
          schema:
            $ref: "#/definitions/OrderCancellation"
      responses:
        200:
          description: Order has been canceled successfully
          schema:
            $ref: "#/definitions/OrdersResponse"
        422:
          description: Bad request
          schema:
            $ref: "#/definitions/OrdersResponse"
        404:
          description: Order Not Found
          schema:
            $ref: "#/definitions/OrdersResponse"
        default:
          description: generic error response
          schema:
            $ref: "#/definitions/OrdersResponse"
    put:
      description: "Endpoint 5 : Update order status, can be used to add or cancel a match"
      summary: "Endpoint 5 : Update order status"
      produces:
        - application/json
      consumes:
        - application/json
      operationId: updateOrder
      parameters:
        - name: id
          in: path
          description: Order UUID  
          required: true
          type: string
        - name: update
          in: body
          required: true
          description: Update details
          schema:
            $ref: "#/definitions/OrderUpdate"
      responses:
        200:
          description: Order has been updated successfully
          schema:
            $ref: "#/definitions/OrdersResponse"
        422:
          description: Bad request
          schema:
            $ref: "#/definitions/OrdersResponse"
        404:
          description: Order Not Found
          schema:
            $ref: "#/definitions/OrdersResponse"
        default:
          description: generic error response
          schema:
            $ref: "#/definitions/OrdersResponse"

  /orders:
    get:
      description: "Endpoint 3 : Paginated list of orders (the most recent first)"
      summary: "Endpoint 3 : Paginated list of orders (the most recent first)"
      produces:
        - application/json
      operationId: listOrders
      parameters:
        - name: offset
          in: query
          description: Offset of the Order (0 is the most recent)  
          required: true
          type: integer
        - name: page_size
          in: query
          description: Number of Orders to return.  
          default: 10
          minimum: 1
          maximum: 100
          type: integer  
      responses:
        200:
          description: List of Orders, starting from offset, and limited by page_size.
          schema:
            $ref: "#/definitions/OrdersResponse"
        422:
          description: Bad request
          schema:
            $ref: "#/definitions/OrdersResponse"
        404:
          description: Orders Not Found
          schema:
            $ref: "#/definitions/OrdersResponse"
        default:
          description: generic error response
          schema:
            $ref: "#/definitions/OrdersResponse"

definitions:
  
  OrdersResponse: 
    type: object
    properties: 
      status: 
        description: Status code
        type: integer
        format: int
      message: 
        description: Error message
        type: string
      order:
        description: "Order details"
        type: object
        $ref: "#/definitions/Order"
      orders:
        description: "List of orders"
        type: object
        $ref: "#/definitions/Orders"
      validation: 
        description: "Validation details"
        type: object
        $ref: "#/definitions/OrdersValidationInfo"
  
  OrdersValidationInfo: 
    type: object 
    properties:
      valid: 
        description: "true if the order is valid, false if the order is not valid"
        type: boolean
        example: true
      validationMessage: 
        description: "descriptive message from the validation service in case of invalid order"
        type: string
      transactionType:
        description: Transaction Type
        type: integer
        format: int
        example: 1
      totalTransCost: 
        description: Total transaction cost
        type: integer
        format: int64
        example: 1000
      platformStatus: 
        description: Status of platform user profile
        type: string
        example: "active"
      platformUserId: 
        description: Platform User UUID
        type: string
        example: "fce880c4-0b5a-469e-984b-91c9859a0f0d"
      bankUserId: 
        description: Bank user UUID
        type: string
        example: "328258e5-99cf-446b-ad06-34cbd15518a2"
      bankUserStatus: 
        description: "Status of the bank profile"
        type: string
        example: "active"     
      blockedUntil: 
        description: "If bank profile is blocked, this will contain the deadline date of the blockage. Format (RFC3339) : '2022-08-11T19:20:30+01:00'"
        type: string
      bankAccountNumber:
        description: Bank account number 
        type: string
        example: "1234"
      bankAccountStatus: 		
        description: Status of the bank account
        type: string
        example: "active"
      availableAmount:
        description: Available amount
        type: integer
        format: int64
        example: 7150
      balance: 
        description: Account balance 
        type: string
        example: "active"  
      allowWithdrawals: 
        description: "true if withdrawals from the bank account are allowed"
        type: boolean
        example: true
      allowDeposits: 
        description: "true if deposits to the bank account are allowed"
        type: boolean
        example: true
  
  Orders:
    type: array
    items:
      $ref: "#/definitions/Order"
  
  Order: 
    type: object 
    required:
      - transactionType
      - amount
      - fee
      - currency
    properties:
      orderId:
        description: Order UUID (Output)
        type: string
      transactionType:
        description: Transaction Type
        type: integer
        format: int
        enum: 
          - 1
          - 2
          - 3
          - 4
          - 5
          - 6
      userId: 
          description: User UUID
          type: string
          example: "328258e5-99cf-446b-ad06-34cbd15518a2"
      from: 
        description: "Source account. This field is mandatory if the transactionType has one of the values 1, 2 or 6" 
        $ref: "#/definitions/OrderAccount"
        type: object
      to: 
        description: "Destination account. This field is mandatory if the transactionType has one of the values 3, 4 or 5"
        type: object
        $ref: "#/definitions/OrderAccount"
      amount: 
        description: Amount
        type: integer
        format: int64
      remainingAmount: 
        description: Remaining Amount
        type: integer
        format: int64
      fee:
        description: Fees (%)
        type: integer
        format: int64
      status: 
        description: Status examples ('SUBMITTED', 'MATCHED', or 'CANCELLED')
        type: string
        example: "SUBMITTED"
      createdAt: 
        description: "Creation date/time. Format (RFC3339) : '1997-07-16T19:20:30+01:00'"
        type: string
      updateAt: 
        description: "Date/time of the last update. Format (RFC3339) : '1997-07-16T19:20:30+01:00'"
        type: string
      currency:
        description: "Currency. Example: 'USD'"
        type: string
        example: "USD"
      triggerOrderId:
        description: "If the order has been triggered to fulfill another order, this field will contain the order ID of the original order"
        type: string
        example: "0ba86082-1f33-11ed-861d-0242ac120002"
      # TODO : We will use the field 'amount' 
      # trigger_order_amount: 
  
  OrderAccount: 
    type: object
    required:
      - bankUserId
      - bankAccount
      - username
      - priority
    properties:
      bankUserId: 
        description: Bank user ID (UUID format)
        type: string
        example: "f43e9eab-26e3-41b1-8105-c590d146459d" 
      bankAccount:
        description: Bank account number 
        type: string
        example: "87724"
      username:
        description: Username
        type: string 
        example: "Gabriel Dowling"  
      priority: 
        description: Priority
        type: string
        example: "high"
      platformAccount: 
        description: Easy platform user identifier 
        type: string
        example: "@user_id"  
  
  OrderCancellation: 
    type: object 
    properties:
      orderId:
        description: Order UUID (Output)
        type: string
      userId: 
          description: UUID of the platform user who initiated the cancelation. 
          type: string
          example: "fce880c4-0b5a-469e-984b-91c9859a0f0d"
  
  OrderUpdate: 
    type: object
    properties:
      userId: 
          description: UUID of the platform user who initiated the update. 
          type: string
          example: "fce880c4-0b5a-469e-984b-91c9859a0f0d"
      addedMatching: 
          description: This object is used if the update is to add a new matching
          type: object
          $ref: "#/definitions/OrderMatching"
      cancelledMatching: 
          description: This object is filled if the update consists of a cancellation of an order that has already been registered
          type: object
          $ref: "#/definitions/OrderMatching"

  OrderMatching: 
    type: object
    properties:
      orderId: 
        description: The uuid of the order that have matched
        type: string
      amount: 
        description: The amount matched
        type: integer
        format: int64
      