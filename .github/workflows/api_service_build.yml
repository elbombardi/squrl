# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: api_service_build

on:
  push:
    branches: [ "main" ]
    paths:
      - src/api_service/**
      - src/db/**

  pull_request:
    branches: [ "main" ]
    paths:
      - src/api_service/**
      - src/db/**

jobs:

  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Build
      run: go build -v ./src/api_service/...

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Test
      run: go test -v --coverprofile api_service_cover.out ./src/api_service/...
    
    - name: Coverage report
      run: go tool cover --func=api_service_cover.out

    - name: Quality Gate - Test coverage shall be above threshold
      run: |
        threshold=80
        coverage=$(go tool cover -func=api_service_cover.out | grep total | awk '{print $3}')
        if [ $coverage -lt $threshold ]; then
          echo "Coverage is below threshold ($threshold < $coverage)"
          exit 1
        fi
        echo "Coverage is above threshold ($threshold < $coverage)"

  docker:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Build the Docker image
      run: docker build . --file src/api_service/Dockerfile --tag squrl_api_service:$(date +%s)
