// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"encoding/json"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PutCustomerHandlerFunc turns a function with the right signature into a put customer handler
type PutCustomerHandlerFunc func(PutCustomerParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PutCustomerHandlerFunc) Handle(params PutCustomerParams) middleware.Responder {
	return fn(params)
}

// PutCustomerHandler interface for that can handle valid put customer params
type PutCustomerHandler interface {
	Handle(PutCustomerParams) middleware.Responder
}

// NewPutCustomer creates a new http.Handler for the put customer operation
func NewPutCustomer(ctx *middleware.Context, handler PutCustomerHandler) *PutCustomer {
	return &PutCustomer{Context: ctx, Handler: handler}
}

/* PutCustomer swagger:route PUT /customer putCustomer

Update Customer

*/
type PutCustomer struct {
	Context *middleware.Context
	Handler PutCustomerHandler
}

func (o *PutCustomer) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPutCustomerParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PutCustomerBadRequestBody put customer bad request body
//
// swagger:model PutCustomerBadRequestBody
type PutCustomerBadRequestBody struct {

	// error
	Error string `json:"error,omitempty"`
}

// Validate validates this put customer bad request body
func (o *PutCustomerBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this put customer bad request body based on context it is used
func (o *PutCustomerBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PutCustomerBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutCustomerBadRequestBody) UnmarshalBinary(b []byte) error {
	var res PutCustomerBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PutCustomerBody put customer body
//
// swagger:model PutCustomerBody
type PutCustomerBody struct {

	// status
	// Required: true
	// Enum: [active inactive]
	Status *string `json:"status"`

	// username
	// Required: true
	Username *string `json:"username"`
}

// Validate validates this put customer body
func (o *PutCustomerBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUsername(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var putCustomerBodyTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["active","inactive"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		putCustomerBodyTypeStatusPropEnum = append(putCustomerBodyTypeStatusPropEnum, v)
	}
}

const (

	// PutCustomerBodyStatusActive captures enum value "active"
	PutCustomerBodyStatusActive string = "active"

	// PutCustomerBodyStatusInactive captures enum value "inactive"
	PutCustomerBodyStatusInactive string = "inactive"
)

// prop value enum
func (o *PutCustomerBody) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, putCustomerBodyTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *PutCustomerBody) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"status", "body", o.Status); err != nil {
		return err
	}

	// value enum
	if err := o.validateStatusEnum("body"+"."+"status", "body", *o.Status); err != nil {
		return err
	}

	return nil
}

func (o *PutCustomerBody) validateUsername(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"username", "body", o.Username); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this put customer body based on context it is used
func (o *PutCustomerBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PutCustomerBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutCustomerBody) UnmarshalBinary(b []byte) error {
	var res PutCustomerBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PutCustomerNotFoundBody put customer not found body
//
// swagger:model PutCustomerNotFoundBody
type PutCustomerNotFoundBody struct {

	// error
	Error string `json:"error,omitempty"`
}

// Validate validates this put customer not found body
func (o *PutCustomerNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this put customer not found body based on context it is used
func (o *PutCustomerNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PutCustomerNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutCustomerNotFoundBody) UnmarshalBinary(b []byte) error {
	var res PutCustomerNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PutCustomerOKBody put customer o k body
//
// swagger:model PutCustomerOKBody
type PutCustomerOKBody struct {

	// status
	Status string `json:"status,omitempty"`
}

// Validate validates this put customer o k body
func (o *PutCustomerOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this put customer o k body based on context it is used
func (o *PutCustomerOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PutCustomerOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutCustomerOKBody) UnmarshalBinary(b []byte) error {
	var res PutCustomerOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PutCustomerUnauthorizedBody put customer unauthorized body
//
// swagger:model PutCustomerUnauthorizedBody
type PutCustomerUnauthorizedBody struct {

	// error
	Error string `json:"error,omitempty"`
}

// Validate validates this put customer unauthorized body
func (o *PutCustomerUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this put customer unauthorized body based on context it is used
func (o *PutCustomerUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PutCustomerUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutCustomerUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res PutCustomerUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
