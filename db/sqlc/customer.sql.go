// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: customer.sql

package db

import (
	"context"
	"database/sql"
)

const checkApiKeyExists = `-- name: CheckApiKeyExists :one
SELECT EXISTS(SELECT 1 FROM customer WHERE api_key = $1)
`

func (q *Queries) CheckApiKeyExists(ctx context.Context, apiKey string) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkApiKeyExists, apiKey)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const checkEmailExists = `-- name: CheckEmailExists :one
SELECT EXISTS(SELECT 1 FROM customer WHERE email = $1)
`

func (q *Queries) CheckEmailExists(ctx context.Context, email string) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkEmailExists, email)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const checkUsernameExists = `-- name: CheckUsernameExists :one
SELECT EXISTS(SELECT 1 FROM customer WHERE username = $1)
`

func (q *Queries) CheckUsernameExists(ctx context.Context, username string) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkUsernameExists, username)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const getCustomerByApiKey = `-- name: GetCustomerByApiKey :one
SELECT id, prefix, username, email, api_key, status, created_at, updated_at
FROM customer WHERE api_key = $1
`

func (q *Queries) GetCustomerByApiKey(ctx context.Context, apiKey string) (Customer, error) {
	row := q.db.QueryRowContext(ctx, getCustomerByApiKey, apiKey)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.Prefix,
		&i.Username,
		&i.Email,
		&i.ApiKey,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCustomerByPrefix = `-- name: GetCustomerByPrefix :one
SELECT id, prefix, username, email, api_key, status, created_at, updated_at
FROM customer WHERE prefix = $1
`

func (q *Queries) GetCustomerByPrefix(ctx context.Context, prefix string) (Customer, error) {
	row := q.db.QueryRowContext(ctx, getCustomerByPrefix, prefix)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.Prefix,
		&i.Username,
		&i.Email,
		&i.ApiKey,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCustomerByUsername = `-- name: GetCustomerByUsername :one
SELECT id, prefix, username, email, api_key, status, created_at, updated_at
FROM customer WHERE username = $1
`

func (q *Queries) GetCustomerByUsername(ctx context.Context, username string) (Customer, error) {
	row := q.db.QueryRowContext(ctx, getCustomerByUsername, username)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.Prefix,
		&i.Username,
		&i.Email,
		&i.ApiKey,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const insertNewCustomer = `-- name: InsertNewCustomer :exec
INSERT INTO customer (id, prefix, username, email, api_key, status, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, prefix, username, email, api_key, status, created_at, updated_at
`

type InsertNewCustomerParams struct {
	ID        int32
	Prefix    string
	Username  string
	Email     string
	ApiKey    string
	Status    string
	CreatedAt sql.NullTime
	UpdatedAt sql.NullTime
}

func (q *Queries) InsertNewCustomer(ctx context.Context, arg InsertNewCustomerParams) error {
	_, err := q.db.ExecContext(ctx, insertNewCustomer,
		arg.ID,
		arg.Prefix,
		arg.Username,
		arg.Email,
		arg.ApiKey,
		arg.Status,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const updateCustomerStatusByApiKey = `-- name: UpdateCustomerStatusByApiKey :exec
UPDATE customer SET status = $1 WHERE api_key = $2
RETURNING id, prefix, username, email, api_key, status, created_at, updated_at
`

type UpdateCustomerStatusByApiKeyParams struct {
	Status string
	ApiKey string
}

func (q *Queries) UpdateCustomerStatusByApiKey(ctx context.Context, arg UpdateCustomerStatusByApiKeyParams) error {
	_, err := q.db.ExecContext(ctx, updateCustomerStatusByApiKey, arg.Status, arg.ApiKey)
	return err
}

const updateCustomerStatusByPrefix = `-- name: UpdateCustomerStatusByPrefix :exec
UPDATE customer SET status = $1 WHERE prefix = $2
RETURNING id, prefix, username, email, api_key, status, created_at, updated_at
`

type UpdateCustomerStatusByPrefixParams struct {
	Status string
	Prefix string
}

func (q *Queries) UpdateCustomerStatusByPrefix(ctx context.Context, arg UpdateCustomerStatusByPrefixParams) error {
	_, err := q.db.ExecContext(ctx, updateCustomerStatusByPrefix, arg.Status, arg.Prefix)
	return err
}

const updateCustomerStatusByUsername = `-- name: UpdateCustomerStatusByUsername :exec
UPDATE customer SET status = $1 WHERE username = $2
RETURNING id, prefix, username, email, api_key, status, created_at, updated_at
`

type UpdateCustomerStatusByUsernameParams struct {
	Status   string
	Username string
}

func (q *Queries) UpdateCustomerStatusByUsername(ctx context.Context, arg UpdateCustomerStatusByUsernameParams) error {
	_, err := q.db.ExecContext(ctx, updateCustomerStatusByUsername, arg.Status, arg.Username)
	return err
}
