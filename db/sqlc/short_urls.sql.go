// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: short_urls.sql

package db

import (
	"context"
	"database/sql"
)

const checkShortUrlKeyExists = `-- name: CheckShortUrlKeyExists :one
SELECT EXISTS(SELECT 1 FROM short_urls WHERE short_url_key = $1 AND customer_id = $2)
`

type CheckShortUrlKeyExistsParams struct {
	ShortUrlKey sql.NullString
	CustomerID  int32
}

func (q *Queries) CheckShortUrlKeyExists(ctx context.Context, arg CheckShortUrlKeyExistsParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkShortUrlKeyExists, arg.ShortUrlKey, arg.CustomerID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const getShortURLByCustomerIDAndShortURLKey = `-- name: GetShortURLByCustomerIDAndShortURLKey :one
SELECT id, short_url_key, customer_id, long_url, status, tracking_status, click_count, first_click_date_time, last_click_date_time, created_at, updated_at
FROM short_urls WHERE customer_id = $1 AND short_url_key = $2
`

type GetShortURLByCustomerIDAndShortURLKeyParams struct {
	CustomerID  int32
	ShortUrlKey sql.NullString
}

func (q *Queries) GetShortURLByCustomerIDAndShortURLKey(ctx context.Context, arg GetShortURLByCustomerIDAndShortURLKeyParams) (ShortUrl, error) {
	row := q.db.QueryRowContext(ctx, getShortURLByCustomerIDAndShortURLKey, arg.CustomerID, arg.ShortUrlKey)
	var i ShortUrl
	err := row.Scan(
		&i.ID,
		&i.ShortUrlKey,
		&i.CustomerID,
		&i.LongUrl,
		&i.Status,
		&i.TrackingStatus,
		&i.ClickCount,
		&i.FirstClickDateTime,
		&i.LastClickDateTime,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const incrementShortURLClickCount = `-- name: IncrementShortURLClickCount :exec
UPDATE short_urls SET click_count = click_count + 1, updated_at=now() WHERE short_url_key = $1 AND customer_id = $2
RETURNING id, short_url_key, customer_id, long_url, status, tracking_status, click_count, first_click_date_time, last_click_date_time, created_at, updated_at
`

type IncrementShortURLClickCountParams struct {
	ShortUrlKey sql.NullString
	CustomerID  int32
}

func (q *Queries) IncrementShortURLClickCount(ctx context.Context, arg IncrementShortURLClickCountParams) error {
	_, err := q.db.ExecContext(ctx, incrementShortURLClickCount, arg.ShortUrlKey, arg.CustomerID)
	return err
}

const insertNewShortURL = `-- name: InsertNewShortURL :exec
INSERT INTO short_urls (short_url_key, customer_id, long_url)
VALUES ($1, $2, $3)
RETURNING id, short_url_key, customer_id, long_url, status, tracking_status, click_count, first_click_date_time, last_click_date_time, created_at, updated_at
`

type InsertNewShortURLParams struct {
	ShortUrlKey sql.NullString
	CustomerID  int32
	LongUrl     string
}

func (q *Queries) InsertNewShortURL(ctx context.Context, arg InsertNewShortURLParams) error {
	_, err := q.db.ExecContext(ctx, insertNewShortURL, arg.ShortUrlKey, arg.CustomerID, arg.LongUrl)
	return err
}

const setShortURLFirstClickDate = `-- name: SetShortURLFirstClickDate :exec
UPDATE short_urls SET first_click_date_time = $1, updated_at=now() WHERE short_url_key = $2 AND customer_id = $3
RETURNING id, short_url_key, customer_id, long_url, status, tracking_status, click_count, first_click_date_time, last_click_date_time, created_at, updated_at
`

type SetShortURLFirstClickDateParams struct {
	FirstClickDateTime sql.NullTime
	ShortUrlKey        sql.NullString
	CustomerID         int32
}

func (q *Queries) SetShortURLFirstClickDate(ctx context.Context, arg SetShortURLFirstClickDateParams) error {
	_, err := q.db.ExecContext(ctx, setShortURLFirstClickDate, arg.FirstClickDateTime, arg.ShortUrlKey, arg.CustomerID)
	return err
}

const setShortURLLastClickDate = `-- name: SetShortURLLastClickDate :exec
UPDATE short_urls SET last_click_date_time = $1, updated_at=now() WHERE short_url_key = $2 AND customer_id = $3
RETURNING id, short_url_key, customer_id, long_url, status, tracking_status, click_count, first_click_date_time, last_click_date_time, created_at, updated_at
`

type SetShortURLLastClickDateParams struct {
	LastClickDateTime sql.NullTime
	ShortUrlKey       sql.NullString
	CustomerID        int32
}

func (q *Queries) SetShortURLLastClickDate(ctx context.Context, arg SetShortURLLastClickDateParams) error {
	_, err := q.db.ExecContext(ctx, setShortURLLastClickDate, arg.LastClickDateTime, arg.ShortUrlKey, arg.CustomerID)
	return err
}

const updateShortURLLongURL = `-- name: UpdateShortURLLongURL :exec
UPDATE short_urls SET long_url = $1, updated_at=now() WHERE short_url_key = $2 AND customer_id = $3
RETURNING id, short_url_key, customer_id, long_url, status, tracking_status, click_count, first_click_date_time, last_click_date_time, created_at, updated_at
`

type UpdateShortURLLongURLParams struct {
	LongUrl     string
	ShortUrlKey sql.NullString
	CustomerID  int32
}

func (q *Queries) UpdateShortURLLongURL(ctx context.Context, arg UpdateShortURLLongURLParams) error {
	_, err := q.db.ExecContext(ctx, updateShortURLLongURL, arg.LongUrl, arg.ShortUrlKey, arg.CustomerID)
	return err
}

const updateShortURLStatus = `-- name: UpdateShortURLStatus :exec
UPDATE short_urls SET status = $1, updated_at=now() WHERE short_url_key = $2 AND customer_id = $3
RETURNING id, short_url_key, customer_id, long_url, status, tracking_status, click_count, first_click_date_time, last_click_date_time, created_at, updated_at
`

type UpdateShortURLStatusParams struct {
	Status      sql.NullString
	ShortUrlKey sql.NullString
	CustomerID  int32
}

func (q *Queries) UpdateShortURLStatus(ctx context.Context, arg UpdateShortURLStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateShortURLStatus, arg.Status, arg.ShortUrlKey, arg.CustomerID)
	return err
}

const updateShortURLTrackingStatus = `-- name: UpdateShortURLTrackingStatus :exec
UPDATE short_urls SET tracking_status = $1, updated_at=now() WHERE short_url_key = $2 AND customer_id = $3
RETURNING id, short_url_key, customer_id, long_url, status, tracking_status, click_count, first_click_date_time, last_click_date_time, created_at, updated_at
`

type UpdateShortURLTrackingStatusParams struct {
	TrackingStatus sql.NullString
	ShortUrlKey    sql.NullString
	CustomerID     int32
}

func (q *Queries) UpdateShortURLTrackingStatus(ctx context.Context, arg UpdateShortURLTrackingStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateShortURLTrackingStatus, arg.TrackingStatus, arg.ShortUrlKey, arg.CustomerID)
	return err
}
